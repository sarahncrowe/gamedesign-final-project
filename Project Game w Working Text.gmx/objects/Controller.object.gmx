<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stuff for views
if(instance_exists(Player)) {
    x = Player.x;
    y = Player.y
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reactivate instances to unpause the game
/* Reactivate instances before draw event so there is no frame
   where they aren't drawn */
if(!is_message() &amp;&amp; sprite_exists(pauseImg)) {
    instance_activate_all();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize stuff
//Set up the message system when the game starts
message_init();

//Variable for later (See Draw event)
pauseImg = noone;

//Instructions message:
message_add("Boy: Hello?");
//Add more messages to the queue
message_add("Boy: Today's my birthday! I'm three!");
message_add("Boy: I guess you need a name...#I'm going to name you Teddy.");
message_add("Boy: Will you be my friend?");
message_add("Boy: I start school tomorrow. I#hope I make some friends.");
message_add("Boy: I hope they like me, and # then lots of people will come#to my party next year.");
message_add("Boy: So, will you be my friend?");
message_add("Boy: Pleeeeeeaaase??");
message_add("Boy: ...I have to go to bed now.#Think about it, ok?");

randomize();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw messages and pause game
//Only draw messages if there are some
if(is_message()) {
    /* Pause the rest of the game while messages exist.
    If you don't want that to happen, delete this -&gt; */
/*    if(!sprite_exists(pauseImg)) {
        //Get an image of the screen
        pauseImg = sprite_create_from_surface(1, 0, 0, 640, 480, false, false, 0, 0);
        //And stop all actions, not including this one
        instance_deactivate_all(true);
    }
    
    //Draw the pause sprite
    draw_sprite(pauseImg, 0, view_xview[0], view_yview[0]);
    /* End point for comment */
    
    message_draw();
} else {
    //Clear the sprite from memory
    if(sprite_exists(pauseImg)) {
        //sprite_delete(pauseImg);
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Remove message, or skip to end
if(keyboard_check_pressed(vk_enter) &amp;&amp; is_message()) {
    if(pos &lt; string_length(message_read())) {
        pos = string_length(message_read());
    } else {
        message_remove();
        //Put a sound here if you want one when the messages are closed
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
